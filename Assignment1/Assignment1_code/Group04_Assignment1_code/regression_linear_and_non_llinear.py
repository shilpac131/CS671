# -*- coding: utf-8 -*-
"""question_2_A1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1wHtjguZPsCmbyytqA-X3fCJOgW51w3wd

# **1D Regression**
"""

import numpy as np
import pandas as pd
from matplotlib import pyplot as plt

from google.colab import drive
drive.mount('/content/drive/')

data_csv = "/content/drive/MyDrive/CS671/Regression/UnivariateData/4.csv"
data = pd.read_csv(data_csv, header=None)
data

# plot ip data
plt.scatter(data.iloc[:,0], data.iloc[:,1])
plt.xlabel("1-D input features")
plt.ylabel("Corresponding output")
plt.title("Plot of Dataset for Univariate Data")
plt.show()

train = int(0.7*data.shape[0])
training_data = data.iloc[:train]

testing_data = data.iloc[train:data.shape[0]]

np.random.seed(0)

def train(x_n):
    w = np.random.randn(2)
    average_error = []
    mse = []
    epoch = 150
    while(epoch):
        err = []
        for i in range(len(x_n)):
            
            x_i = x_n.iat[i, 0]
            s_n = np.dot(w.T, [1, x_i])
            y_n = x_n.iat[i, 1]

            error = 0.5*(y_n-s_n)**2
            eta = 0.001
            w = w + eta*(y_n-s_n)*x_i
            err.append(error)

        avg_error = sum(err)/(len(err))
        average_error.append(avg_error)
        mse.append(np.sqrt(sum(err)/len(err)))
        epoch -= 1  
    #print(avg_error, w)
    return w, average_error, mse

def testdata(x_n, w):
    y = []
    for i in range(len(x_n)):
        y.append(np.dot(w.T, [1, x_n.iat[i, 0]]))
    return y

y = testdata(testing_data, w)
print(y[0])

w, average_error, mse = train(training_data)
plt.plot(average_error)
plt.xlabel("epochs")
plt.ylabel("average error")
plt.title("Plot of average error vs epochs for univariate data")
plt.show()

w_train, avg_train, mse_train = train(training_data)
w_test, avg_test, mse_test = train(testing_data)

plt.plot(mse_train)
plt.plot(mse_test)
plt.xlabel("epoch")
plt.ylabel("MSE")
plt.title("mean squared error (MSE) on training data and test data for univariate data")
plt.legend(["Training data", "Test data"])
plt.show()

plt.scatter(data.iloc[:,0], data.iloc[:,1])
plt.scatter(testing_data.iloc[:,0], y)
plt.xlabel("x axis")
plt.ylabel("y axis")
plt.title("Perceptron method learning function (UNIVARIATE DATA)")
plt.legend(['Input', 'Output'])
plt.show()

y = testdata(training_data, w)
plt.scatter(training_data.iloc[:,0], training_data.iloc[:,1])
plt.scatter(training_data.iloc[:,0], y)
plt.title("target output vs model output for training data(UNIVARIATE DATA)")
plt.xlabel("x-axis")
plt.ylabel("y-axis")
plt.legend(['target output', 'model output'])
plt.show()

y = testdata(testing_data, w)
plt.scatter(testing_data.iloc[:,0], testing_data.iloc[:,1])
plt.scatter(testing_data.iloc[:,0], y)
plt.title("target output vs model output for test data(UNIVARIATE DATA)")
plt.xlabel("x axis")
plt.ylabel("y axis")
plt.legend(['target output', 'model output'])
plt.show()

"""# **2D Regression**

"""

from mpl_toolkits import mplot3d

data_csv = "/content/drive/MyDrive/CS671/Regression/BivariateData/4.csv"
data = pd.read_csv(data_csv, header=None)
data

#plot input data
fig = plt.figure()
ax = plt.axes(projection='3d')
ax.scatter3D(data.iloc[:,0], data.iloc[:,1], data.iloc[:,2], cmap='Purples')
plt.title("Dataset for BIVARIATE data")
plt.show()

train = int(0.7*data.shape[0])
training_data = data.iloc[:train]
testing_data = data.iloc[train:data.shape[0]]

np.random.seed(0)

def train(x_n):
    w = np.random.randn(3)
    average_error = []
    mse = []
    epoch = 50
    while(epoch):
        err = []
        for i in range(len(x_n)):
            
            x_i = [1, x_n.iat[i, 0], x_n.iat[i, 1]]
            s_n = np.dot(w.T, x_i)
            y_n = x_n.iat[i, 2]

            error = 0.5*(y_n-s_n)**2
            eta = 0.001
            w = w + eta*np.dot((y_n-s_n), x_i)
            err.append(error)

        avg_error = sum(err)/(len(err))
        average_error.append(avg_error)
        mse.append(np.sqrt(sum(err)/len(err)))
        epoch -= 1  
    #print(avg_error, w)
    return w, average_error, mse

def testdata(x_n, w):   
    y = []
    for i in range(len(x_n)):
        y.append(np.dot(w.T, [1, x_n.iat[i, 0], x_n.iat[i, 1]]))   
    return y

w, average_error, mse = train(training_data)
y = testdata(testing_data, w)

print(y[0])

plt.plot(average_error)
plt.xlabel("epochs")
plt.ylabel("average Error")
plt.title("average error vs epochs for BIVARIATE DATA")
plt.show()

w_train, avg_train, mse_train = train(training_data)
w_test, avg_test, mse_test = train(testing_data)

plt.plot(mse_train)
plt.plot(mse_test)
plt.xlabel("epoch")
plt.ylabel("MSE")
plt.title("mean squared error (MSE) on training data and test data for BIVARIATE data")
plt.legend(["Training data", "Test data"])
plt.show()

fig = plt.figure()
ax = plt.axes(projection='3d')
ax.scatter3D(training_data.iloc[:,0], training_data.iloc[:,1], training_data.iloc[:,2], cmap='Greens')
plt.title("target output for training data")
plt.show()

y = testdata(training_data, w)
fig = plt.figure()
ax = plt.axes(projection='3d')
ax.scatter3D(training_data.iloc[:,0], training_data.iloc[:,1], y, cmap='Greens')
plt.title("model output for training data")
plt.show()

y = testdata(testing_data, w)
fig = plt.figure()
ax = plt.axes(projection='3d')
ax.scatter3D(testing_data.iloc[:,0], testing_data.iloc[:,1], y, cmap='Greens')
plt.title("model output for testing data")
plt.show()

fig = plt.figure()
ax = plt.axes(projection='3d')
ax.scatter3D(testing_data.iloc[:,0], testing_data.iloc[:,1], testing_data.iloc[:,2], cmap='Greens')
plt.title("target output for testing data")
plt.show()

y = testdata(training_data, w)
fig = plt.figure()
ax = plt.axes(projection='3d')
ax.scatter3D(training_data.iloc[:,0], training_data.iloc[:,1], training_data.iloc[:,2], cmap='Blues')
ax.scatter3D(training_data.iloc[:,0], training_data.iloc[:,1], y)

plt.title("target output vs model output for training data(BIVARIATE DATA)")
plt.xlabel("x axis")
plt.ylabel("y axis")
plt.legend(['target output', 'model output'])
plt.show()

y = testdata(testing_data, w)
fig = plt.figure()
ax = plt.axes(projection='3d')
ax.scatter3D(testing_data.iloc[:,0], testing_data.iloc[:,1], testing_data.iloc[:,2], cmap='Purples')
ax.scatter3D(testing_data.iloc[:,0], testing_data.iloc[:,1], y)

plt.title("target output vs model output for Testing data(BIVARIATE DATA)")
plt.xlabel("x axis")
plt.ylabel("y axis")
plt.legend(['target output', 'model output'])
plt.show()

