# -*- coding: utf-8 -*-
"""final_regression_final.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Du53nAe9jyfkGUKR6cpTrbMsXdgXfoj3
"""

import pandas as pd
from matplotlib import pyplot as plt
import numpy as np
from numpy import linalg

'''from google.colab import drive
drive.mount('/content/drive/')'''

path = "/home/ananya/Downloads/Group04/Regression/UnivariateData/4.csv"

data = pd.read_csv(path, header=None, delimiter=",")
data = pd.DataFrame(data)
data

'''from google.colab import drive
drive.mount('/content/drive')'''

plt.scatter(data.iloc[:,0], data.iloc[:,1])
plt.title("Input Data")
plt.xlabel("x axis")
plt.ylabel("y axis")
plt.show()

def split_data(data):
    m, n = data.shape
    l1 = int(0.6*m)
    l2 = l1 + int(0.2*m)
    training = data.iloc[:l1]
    validation = data.iloc[l1:l2]
    test = data.iloc[l2:m]
    
    return training, validation, test

training, validation, testing = split_data(data)

# testing.head

def linear(x):
    return x

def inst_error(y, yp):
    return sum(0.5*(y-yp)**2)

def sigmoid(x):
    return 1/(1+np.exp(-(x)))

def train_data(xn):
    m=len(xn)
    wh = 0.10*np.random.randn(2, 4)
    wo = 0.10*np.random.randn(4, 1)
    avg_err = []
    epoch = 150
    mse = []
    while(epoch):
    
        err = []        
        for i in range(m):
            y = xn.iat[i,1]

            xi = [1, xn.iat[i,0]] #Input layer
            #--------------------------
            h1 = np.dot(wh.T, xi) #hidden layer 1 out
            a1 = sigmoid (h1) #hidden layer 1 activation out
            

            #--------------------------
            #--------------------------
            out = np.dot(wo.T, a1) #Output layer out
            ao = linear(out) #Output activation 
            #--------------------------
            
            en = inst_error(y, ao)
            err.append(en)
            
            neta = 0.05
            
            #Update weights
            wo = wo + (neta * np.outer(a1, (y-ao)))
            
            var1 = np.dot(wo, (y-ao))
            var2 = a1*(1-a1)
            
            wh = wh + (neta * np.outer(xi, var1*var2))

            
        avg_error = sum(err)/len(err)
        avg_err.append(avg_error)
        # if epoch%1==0:
        #     print("ERROR: ",avg_error)
        epoch -= 1

    return wh, wo, avg_err, a1, ao

wh, wo, avg_err, h1_out, output = train_data(training)

def test(xn, wh, wo):
    
    y = []
    #m,n = xn.shape
    for i in range(len(xn)):
      xi = [1, xn.iat[i, 0]]
      h = np.dot(wh.T,xi)
      a = sigmoid(h)

      out = np.dot(wo.T, a)
      ao = linear(out)
      y.append(ao)
    
    return np.array(y)

y = test(training, wh, wo)
plt.scatter(training.iloc[:,0], training.iloc[:,1])
plt.scatter(training.iloc[:,0], y)
plt.title("model output and target output for training data")
plt.xlabel("x axis")
plt.ylabel("y axis")
plt.legend(["Input", "Predicted"])
plt.show()

y = test(testing, wh, wo)
plt.scatter(training.iloc[:,0], training.iloc[:,1])
plt.scatter(testing.iloc[:,0], y)
plt.title("model output and target output for validation data")
plt.xlabel("x axis")
plt.ylabel("y axis")
plt.legend(["Input", "Predicted"])
plt.show()

y = test(validation, wh, wo)
plt.scatter(training.iloc[:,0], training.iloc[:,1])
plt.scatter(validation.iloc[:,0], y)
plt.title("model output and target output for validation data")
plt.xlabel("x axis")
plt.ylabel("y axis")
plt.legend(["Input", "Predicted"])
plt.show()

y = test(training, wh, wo)
plt.scatter(training.iloc[:,0], training.iloc[:,1])
plt.scatter(training.iloc[:,0], y)
plt.title("Result")
plt.xlabel("x axis")
plt.ylabel("y axis")
plt.legend(["Input", "Predicted"])
plt.show()

plt.plot(avg_err)
plt.title("Average Error vs Epoch")
plt.xlabel("Epoch")
plt.ylabel("Average Error")
plt.show()

y = test(training, wh, wo)
plt.scatter(training.iloc[:,1], y, color='green')
plt.title("Scatter plot for training data")
plt.xlabel("target output")
plt.ylabel("model output")
plt.show()

y = test(validation, wh, wo)
plt.scatter(validation.iloc[:,1], y, color='pink')
plt.title("Scatter plot for validation data")
plt.xlabel("target output")
plt.ylabel("model output")
plt.show()

y = test(testing, wh, wo)
plt.scatter(testing.iloc[:,1], y, color='olive')
plt.title("Scatter plot for testing data")
plt.xlabel("target output")
plt.ylabel("model output")
plt.show()

"""plots

"""

def test(xn, wh, wo):
    
    y = []
    neuron = []
    #m,n = xn.shape
    for i in range(len(xn)):
      xi = [1, xn.iat[i, 0]]
      h = np.dot(wh.T,xi)
      a = sigmoid(h)
      neuron.append(a)

      out = np.dot(wo.T, a)
      ao = linear(out)
      y.append(ao)
    
    return np.array(y),np.array(neuron)

y,neuron = test(training, wh, wo)

def test(xn, wh, wo):
    
    y = []
    yn = []
    neuron = []
    m,n = xn.shape
    for i in range(len(xn)):
      yn = xn.iat[i,1]
      xi = [1, xn.iat[i, 0]]
      h = np.dot(wh.T,xi)
      a = sigmoid(h)
      neuron.append(a)

      out = np.dot(wo.T, a)
      ao = linear(out)
      y.append(ao)
     
     
  

    
    return np.array(y),np.array(neuron)

y,neuron = test(training, wh, wo)

"""training data"""

y,neuron = test(training, wh, wo)
plt.scatter(training.iloc[:,1],neuron[:,0], color='pink')

plt.title("Output of neuron 1")
plt.xlabel("input feature")
plt.ylabel("neuron 1 output")
plt.show()

plt.scatter(training.iloc[:,1],neuron[:,1], color='pink')

plt.title("Output of neuron 2")
plt.xlabel("input feature")
plt.ylabel("neuron 2 output")
plt.show()

plt.scatter(training.iloc[:,1],neuron[:,2], color='pink')

plt.title("Output of neuron 3")
plt.xlabel("input feature")
plt.ylabel("neuron 3 output")
plt.show()

plt.scatter(training.iloc[:,1],neuron[:,3], color='pink')

plt.title("Output of neuron 4")
plt.xlabel("input feature")
plt.ylabel("neuron 4 output")
plt.show()

"""validation data"""

y,neuron = test(validation, wh, wo)
plt.scatter(validation.iloc[:,1],neuron[:,0], color='pink')

plt.title("Output of neuron 1")
plt.xlabel("input feature")
plt.ylabel("neuron 1 output")
plt.show()

y,neuron = test(validation, wh, wo)
plt.scatter(validation.iloc[:,1],neuron[:,1], color='pink')

plt.title("Output of neuron 2")
plt.xlabel("input feature")
plt.ylabel("neuron 2 output")
plt.show()

y,neuron = test(validation, wh, wo)
plt.scatter(validation.iloc[:,1],neuron[:,2], color='pink')

plt.title("Output of neuron 3")
plt.xlabel("input feature")
plt.ylabel("neuron 3 output")
plt.show()

y,neuron = test(validation, wh, wo)
plt.scatter(validation.iloc[:,1],neuron[:,3], color='pink')

plt.title("Output of neuron 4")
plt.xlabel("input feature")
plt.ylabel("neuron 4 output")
plt.show()

"""testing"""

y,neuron = test(testing, wh, wo)
plt.scatter(testing.iloc[:,1],neuron[:,0], color='pink')

plt.title("Output of neuron 1")
plt.xlabel("input feature")
plt.ylabel("neuron 1 output")
plt.show()

y,neuron = test(testing, wh, wo)
plt.scatter(testing.iloc[:,1],neuron[:,1], color='pink')

plt.title("Output of neuron 2")
plt.xlabel("input feature")
plt.ylabel("neuron 2 output")
plt.show()

y,neuron = test(testing, wh, wo)
plt.scatter(testing.iloc[:,1],neuron[:,2], color='pink')

plt.title("Output of neuron 3")
plt.xlabel("input feature")
plt.ylabel("neuron 3 output")
plt.show()

y,neuron = test(testing, wh, wo)
plt.scatter(testing.iloc[:,1],neuron[:,3], color='pink')

plt.title("Output of neuron 4")
plt.xlabel("input feature")
plt.ylabel("neuron 4 output")
plt.show()

"""# **BIVARIENT**"""

import pandas as pd
from matplotlib import pyplot as plt
import numpy as np
from mpl_toolkits import mplot3d

filepath = "/home/ananya/Downloads/Group04/Regression/BivariateData/4.csv"
data = pd.read_csv(filepath, header=None, delimiter=",")
data

fig = plt.figure()
ax = plt.axes(projection='3d')
ax.scatter3D(data.iloc[:,0], data.iloc[:,1], data.iloc[:,2], cmap='Greens')
plt.show()

def split_data(data):
    m, n = data.shape
    l1 = int(0.6*m)
    l2 = l1 + int(0.2*m)
    training = data.iloc[:l1]
    validation = data.iloc[l1:l2]
    test = data.iloc[l2:m]
    
    return training, validation, test

training, validation, testing = split_data(data)

def linear(x):
    return x
def sigmoid(x):
    return 1/(1+np.exp(-(x)))
def inst_error(y, yp):
    return sum(0.5*(y-yp)**2)

def train_data(xn):

    wh1 = 0.3*np.random.randn(3, 5)
    wh2 = 0.3*np.random.randn(5, 5)
    wo = 0.3*np.random.randn(5, 1)
    avg_err = []
    mse = []
    epoch = 100
    
    while(epoch):
    
        err = []
        
        for i in range(len(xn)):
            
            y = xn.iat[i, 2]

            xi = [1, xn.iat[i,0], xn.iat[i,1]] #Input layer
            #--------------------------
            h1 = np.dot(wh1.T, xi) #hidden layer 1 out
            a1 = sigmoid(h1) #hidden layer 1 activation out
            #--------------------------
            h2 = np.dot(wh2.T, a1) #hidden layer 2 out
            a2 = sigmoid(h2) #hidden layer 2 activation out
            #--------------------------
            out = np.dot(wo.T, a2) #Output layer out
            ao = linear(out) #Output activation 
            #--------------------------
               
            en = inst_error(y, ao)
            err.append(en)
            neta = 0.01
            
            #Update weights
            wo = wo + (neta * np.outer(a2, (y-ao)))
                        
            var1 = np.dot(wo, (y-ao))
            var2 = a2*(1-a2)
            wh2 = wh2 + (neta * np.outer(a1, var1*var2))
            
            var3 = var1*var2
            var4 = np.dot(wh2, var3)
            var5 = a1*(1-a1)
            wh1 = wh1 + (neta * np.outer(xi, var4*var5))

            
        avg_error = sum(err)/len(err)
        avg_err.append(avg_error)
        if epoch%10==0:
            print("ERROR: ",avg_error)
        epoch -= 1
        mse.append(np.sqrt(avg_error))
    
    return wh1, wh2, wo, avg_err, a1, a2, ao, mse

wh1, wh2, wo, avg_err, a1, a2, ao, mse = train_data(training)

def test_data(wh1, wh2, wo, xn):
    pred_out = []
    for i in range(len(xn)):
        
        xi = [1, xn.iat[i,0], xn.iat[i,1]]
        
        h1 = np.dot(wh1.T, xi)
        a1 = sigmoid(h1)
        
        h2 = np.dot(wh2.T, a1)
        a2 = sigmoid(h2)

        out = np.dot(wo.T, a2) 
        ao = linear(out) 
        
        pred_out.append(ao)
        
    return (np.array(pred_out))
y = test_data(wh1, wh2, wo, training)

plt.plot(avg_err)
plt.title("Average Error vs Epoch")
plt.xlabel("Epoch")
plt.ylabel("Average Error")
plt.show()

fig = plt.figure()
ax = plt.axes(projection='3d')
ax.scatter3D(training.iloc[:,0], training.iloc[:,1], training.iloc[:,2], color='yellow')
ax.scatter3D(training.iloc[:,0], training.iloc[:,1], y, color='green')
plt.title("Result")
plt.xlabel("x axis")
plt.ylabel("y axis")
plt.legend(["Input", "Predicted"])
plt.show()

fig = plt.figure()
ax = plt.axes(projection='3d')
#ax.scatter3D(training.iloc[:,0], training.iloc[:,1], training.iloc[:,2], cmap='Greens')
ax.scatter3D(training.iloc[:,0], training.iloc[:,1], y, color='green')
plt.title("Result")
plt.xlabel("x axis")
plt.ylabel("y axis")
plt.legend(["Input", "Predicted"])
plt.show()

plt.scatter(training.iloc[:,2], y, color='red')
plt.title("Scatter plot for training data")
plt.xlabel("target output")
plt.ylabel("model output")
#plt.legend(['Input', 'Output'])
plt.show()

y = test_data(wh1, wh2, wo, validation)
plt.scatter(validation.iloc[:,2], y, color='green')
plt.title("Scatter plot for validation data")
plt.xlabel("target output")
plt.ylabel("model output")
#plt.legend(['Input', 'Output'])
plt.show()

y = test_data(wh1, wh2, wo, testing)
plt.scatter(testing.iloc[:,2], y, color='pink')
plt.title("Scatter plot for test data")
plt.xlabel("target output")
plt.ylabel("model output")
#plt.legend(['Input', 'Output'])
plt.show()

"""training data"""

def test_data(wh1, wh2, wo, xn):
    pred_out = []
    neuron = []
    for i in range(len(xn)):
        
        xi = [1, xn.iat[i,0], xn.iat[i,1]]
        
        h1 = np.dot(wh1.T, xi)
        a1 = sigmoid(h1)
        
        h2 = np.dot(wh2.T, a1)
        a2 = sigmoid(h2)
        neuron.append(a2)

        out = np.dot(wo.T, a2) 
        ao = linear(out) 
        
        pred_out.append(ao)
        
    return (np.array(pred_out)),(np.array(neuron))

"""training data"""

y , neuron = test_data(wh1, wh2, wo, training)
fig = plt.figure()
ax = plt.axes(projection='3d')
ax.scatter3D(training.iloc[:,0], training.iloc[:,1],  neuron[:,0],color="green")
plt.title("Output of Hidden node 1")
plt.xlabel("input feature 1")
plt.ylabel("input feature 2")
ax.set_zlabel("Neuron 1 output")
plt.show()

y , neuron = test_data(wh1, wh2, wo, training)
fig = plt.figure()
ax = plt.axes(projection='3d')
ax.scatter3D(training.iloc[:,0], training.iloc[:,1],  neuron[:,1],color="green")
plt.title("Output of Hidden node 2")
plt.xlabel("input feature 1")
plt.ylabel("input feature 2")
ax.set_zlabel("Neuron 2 output")
plt.show()

y , neuron = test_data(wh1, wh2, wo, training)
fig = plt.figure()
ax = plt.axes(projection='3d')
ax.scatter3D(training.iloc[:,0], training.iloc[:,1],  neuron[:,2],color="green")
plt.title("Output of Hidden node 3")
plt.xlabel("input feature 1")
plt.ylabel("input feature 2")
ax.set_zlabel("Neuron 3 output")
plt.show()

y , neuron = test_data(wh1, wh2, wo, training)
fig = plt.figure()
ax = plt.axes(projection='3d')
ax.scatter3D(training.iloc[:,0], training.iloc[:,1],  neuron[:,3],color="green")
plt.title("Output of Hidden node 4")
plt.xlabel("input feature 1")
plt.ylabel("input feature 2")
ax.set_zlabel("Neuron 4 output")
plt.show()

y , neuron = test_data(wh1, wh2, wo, training)
fig = plt.figure()
ax = plt.axes(projection='3d')
ax.scatter3D(training.iloc[:,0], training.iloc[:,1],  neuron[:,4],color="green")
plt.title("Output of Hidden node 5")
plt.xlabel("input feature 1")
plt.ylabel("input feature 2")
ax.set_zlabel("Neuron 5 output")
plt.show()

"""validation"""

y , neuron = test_data(wh1, wh2, wo, validation)
fig = plt.figure()
ax = plt.axes(projection='3d')
ax.scatter3D(validation.iloc[:,0], validation.iloc[:,1],  neuron[:,0],color="green")
plt.title("Output of Hidden node 1")
plt.xlabel("input feature 1")
plt.ylabel("input feature 2")
ax.set_zlabel("Neuron 1 output")
plt.show()

y , neuron = test_data(wh1, wh2, wo, validation)
fig = plt.figure()
ax = plt.axes(projection='3d')
ax.scatter3D(validation.iloc[:,0], validation.iloc[:,1],  neuron[:,1],color="green")
plt.title("Output of Hidden node 2")
plt.xlabel("input feature 1")
plt.ylabel("input feature 2")
ax.set_zlabel("Neuron 2 output")
plt.show()

y , neuron = test_data(wh1, wh2, wo, validation)
fig = plt.figure()
ax = plt.axes(projection='3d')
ax.scatter3D(validation.iloc[:,0], validation.iloc[:,1],  neuron[:,2],color="green")
plt.title("Output of Hidden node 3")
plt.xlabel("input feature 1")
plt.ylabel("input feature 2")
ax.set_zlabel("Neuron 3 output")
plt.show()

y , neuron = test_data(wh1, wh2, wo, validation)
fig = plt.figure()
ax = plt.axes(projection='3d')
ax.scatter3D(validation.iloc[:,0], validation.iloc[:,1],  neuron[:,3],color="green")
plt.title("Output of Hidden node 4")
plt.xlabel("input feature 1")
plt.ylabel("input feature 2")
ax.set_zlabel("Neuron 4 output")
plt.show()

y , neuron = test_data(wh1, wh2, wo, validation)
fig = plt.figure()
ax = plt.axes(projection='3d')
ax.scatter3D(validation.iloc[:,0], validation.iloc[:,1],  neuron[:,4],color="green")
plt.title("Output of Hidden node 5")
plt.xlabel("input feature 1")
plt.ylabel("input feature 2")
ax.set_zlabel("Neuron 5 output")
plt.show()

"""testing"""

y , neuron = test_data(wh1, wh2, wo, testing)
fig = plt.figure()
ax = plt.axes(projection='3d')
ax.scatter3D(testing.iloc[:,0], testing.iloc[:,1],  neuron[:,0],color="green")
plt.title("Output of Hidden node 1")
plt.xlabel("input feature 1")
plt.ylabel("input feature 2")
ax.set_zlabel("Neuron 1 output")
plt.show()

y , neuron = test_data(wh1, wh2, wo, testing)
fig = plt.figure()
ax = plt.axes(projection='3d')
ax.scatter3D(testing.iloc[:,0], testing.iloc[:,1],  neuron[:,1],color="green")
plt.title("Output of Hidden node 2")
plt.xlabel("input feature 1")
plt.ylabel("input feature 2")
ax.set_zlabel("Neuron 2 output")
plt.show()

y , neuron = test_data(wh1, wh2, wo, testing)
fig = plt.figure()
ax = plt.axes(projection='3d')
ax.scatter3D(testing.iloc[:,0], testing.iloc[:,1],  neuron[:,2],color="green")
plt.title("Output of Hidden node 3")
plt.xlabel("input feature 1")
plt.ylabel("input feature 2")
ax.set_zlabel("Neuron 3 output")
plt.show()

y , neuron = test_data(wh1, wh2, wo, testing)
fig = plt.figure()
ax = plt.axes(projection='3d')
ax.scatter3D(testing.iloc[:,0], testing.iloc[:,1],  neuron[:,3],color="green")
plt.title("Output of Hidden node 4")
plt.xlabel("input feature 1")
plt.ylabel("input feature 2")
ax.set_zlabel("Neuron 4 output")
plt.show()

y , neuron = test_data(wh1, wh2, wo, testing)
fig = plt.figure()
ax = plt.axes(projection='3d')
ax.scatter3D(testing.iloc[:,0], testing.iloc[:,1],  neuron[:,4],color="green")
plt.title("Output of Hidden node 5")
plt.xlabel("input feature 1")
plt.ylabel("input feature 2")
ax.set_zlabel("Neuron 5 output")
plt.show()

